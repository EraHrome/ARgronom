@using ARgronom.Models.ViewModels;
@using System.Security.Claims;
@using ARgronom.Contexts;
@using ARgronom.Models;
@using System.Linq;

@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@inject Context context

@model List<ArViewModel>

@{
    Layout = null;
    var roleType = Role.None;
    var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);
    if (userId != null)
    {
        var role = context.Roles.FirstOrDefault(x => x.UserId == userId);
        if (role != null)
        {
            roleType = role.Role;
        }
    }
}

<html>
  <head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>ARgronom AR mode</title>
    <script src="https://aframe.io/releases/1.0.4/aframe.min.js"></script>
    <script src="https://unpkg.com/aframe-look-at-component@0.8.0/dist/aframe-look-at-component.min.js"></script>
    <script src="https://raw.githack.com/AR-js-org/AR.js/master/aframe/build/aframe-ar-nft.js"></script>
    <script>

        function createAndAppendImageMarker(latitude, longitude, imageName) {
            let imageMarker = createImageMarker(latitude, longitude, imageName);
			document.querySelector('a-scene').appendChild(imageMarker);
        }

        function createAndAppendMarker(latitude, longitude, title) {
            title = translit(title);
            let textMarker = createMarker(latitude, longitude, title);
			document.querySelector('a-scene').appendChild(textMarker);
        }
        function createImageMarker(latitude, longitude, imageName) {
            let marker = document.createElement('a-image');
            marker.setAttribute('src', `/products/${imageName}`);
            marker.setAttribute('rotation', '-90 0 0');
            marker.setAttribute('width', '');
            marker.setAttribute('height', '');
            marker.setAttribute('opacity', '1');
            marker.setAttribute('transparent', 'true');
            marker.setAttribute('alpha-test', '0.2');
            marker.setAttribute('shader', 'standard');
            marker.setAttribute('scale', '3 3 3');
            marker.setAttribute('visible', '');
            marker.setAttribute('material', '');
            marker.setAttribute('geometry', '');
            marker.setAttribute('look-at', '[gps-camera]');
            marker.setAttribute('gps-entity-place', `latitude: ${latitude}; longitude: ${longitude};`);
            return marker;
        }
        
        function createMarker(latitude, longitude, title) {
            let marker = document.createElement('a-text');
            marker.setAttribute('value', title);
		    marker.setAttribute('scale', '3 3 3');
		    marker.setAttribute('look-at', '[gps-camera]');
		    marker.setAttribute('gps-entity-place', `latitude: ${latitude}; longitude: ${longitude};`);
            return marker;
        }

        function translit (word) {
	        var answer = '';
	        var converter = {
	        	'а': 'a',    'б': 'b',    'в': 'v',    'г': 'g',    'д': 'd',
	        	'е': 'e',    'ё': 'e',    'ж': 'zh',   'з': 'z',    'и': 'i',
	        	'й': 'y',    'к': 'k',    'л': 'l',    'м': 'm',    'н': 'n',
	        	'о': 'o',    'п': 'p',    'р': 'r',    'с': 's',    'т': 't',
	        	'у': 'u',    'ф': 'f',    'х': 'h',    'ц': 'c',    'ч': 'ch',
	        	'ш': 'sh',   'щ': 'sch',  'ь': '',     'ы': 'y',    'ъ': '',
	        	'э': 'e',    'ю': 'yu',   'я': 'ya',
 
	        	'А': 'A',    'Б': 'B',    'В': 'V',    'Г': 'G',    'Д': 'D',
	        	'Е': 'E',    'Ё': 'E',    'Ж': 'Zh',   'З': 'Z',    'И': 'I',
	        	'Й': 'Y',    'К': 'K',    'Л': 'L',    'М': 'M',    'Н': 'N',
	        	'О': 'O',    'П': 'P',    'Р': 'R',    'С': 'S',    'Т': 'T',
	        	'У': 'U',    'Ф': 'F',    'Х': 'H',    'Ц': 'C',    'Ч': 'Ch',
	        	'Ш': 'Sh',   'Щ': 'Sch',  'Ь': '',     'Ы': 'Y',    'Ъ': '',
	        	'Э': 'E',    'Ю': 'Yu',   'Я': 'Ya'
	        };
 
	for (var i = 0; i < word.length; ++i ) {
		if (converter[word[i]] == undefined){
			answer += word[i];
		} else {
			answer += converter[word[i]];
		}
	}
 
	return answer;
}

      window.onload = () => {
	  
        @foreach(var arModel in Model)
        {
         <text>
            createAndAppendMarker(@arModel.UserMarker.Latitude, @arModel.UserMarker.Longitude, '@Html.Raw(arModel.Plant.Title)');
            createAndAppendImageMarker(@arModel.UserMarker.Latitude, @arModel.UserMarker.Longitude, '@arModel.Plant.ImageName');
         </text>
        }

     }
    </script>
  </head>

  <body style="margin: 0; overflow: hidden;">
    <a-scene
      vr-mode-ui="enabled: false;"
      embedded
      arjs="sourceType: webcam; debugUIEnabled: true;"
    >
      <a-camera gps-camera='gpsMinDistance: 1;' rotation-reader> </a-camera>
    </a-scene>
  </body>
</html>